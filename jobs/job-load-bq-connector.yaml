apiVersion: v1
data:
  load-bq.js: |-
    const SCHEMA_REGISTRY_URL = process.env.SCHEMA_REGISTRY_URL
    const SCHEMA_REGISTRY_USERNAME = process.env.SCHEMA_REGISTRY_USERNAME
    const SCHEMA_REGISTRY_PASSWORD = process.env.SCHEMA_REGISTRY_PASSWORD
    const data = 
    { 
      "type": "service_account",
      "project_id": "optimal-moon-258002",
      "private_key_id": "<SOME_ID>",
      "private_key": "-----BEGIN PRIVATE KEY-----\encoded key data here=\n-----END PRIVATE KEY-----\n",
      "client_email": "<SOME_ID>-compute@developer.gserviceaccount.com",
      "client_id": "<SOME_ID>",
      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
      "token_uri": "https://oauth2.googleapis.com/token",
      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/925465374254-compute%40developer.gserviceaccount.com"
    }
    const config = 
    {
      "name": "bq",
      "config": {
        "connector.class": "com.wepay.kafka.connect.bigquery.BigQuerySinkConnector",
        "tasks.max" : "1",
        "topics" : "dbserver1.demo.member",
        "sanitizeTopics" : "true",
        "autoCreateTables" : "true",
        "autoUpdateSchemas" : "true",
        "schemaRetriever" : "com.wepay.kafka.connect.bigquery.schemaregistry.schemaretriever.SchemaRegistrySchemaRetriever",
        "schemaRegistryLocation": "https://" + SCHEMA_REGISTRY_URL,
        "bufferSize": "100000",
        "maxWriteSize":"10000",
        "tableWriteWait": "1000",
        "project" : "optimal-moon-258002",
        "datasets" : ".*=demo",
        "keySource" : "JSON",
        "keyfile" : JSON.stringify(data),
        "schemaRegistryClient.basic.auth.credentials.source" : "USER_INFO",
        "schemaRegistryClient.basic.auth.user.info" : SCHEMA_REGISTRY_USERNAME + ":" + SCHEMA_REGISTRY_PASSWORD,
        "rest.advertised.host.name" : "connector-0.connector.totalwine.svc.cluster.local",
        "rest.advertised.port" : "8083",
        "value.converter": "io.confluent.connect.avro.AvroConverter",
        "value.converter.schema.registry.url": "https://" + SCHEMA_REGISTRY_URL,
        "value.converter.basic.auth.credentials.source": "USER_INFO",
        "value.converter.schema.registry.basic.auth.user.info": SCHEMA_REGISTRY_USERNAME + ":" + SCHEMA_REGISTRY_PASSWORD,
        "allBQFieldsNullable" : "true"
      }
    }
    const configStr = JSON.stringify(config);
    var http = require("http")
    var headers = {
      "Content-Type": "application/json",
      "Content-Length": configStr.length
    }
    var options = {
      host: "connector-0.connector.totalwine.svc.cluster.local",
      port: 8083,
      path: "/connectors",
      method: "POST",
      headers: headers
    }
    try {
      var req = http.request(options, function(res) {
        res.setEncoding("utf-8");
        var responseStr = "";
        res.on("data", function(data) {
          responseStr += data;
        })
        res.on("end", function() {
          console.log(responseStr);
        })
      })
      req.write(configStr)
      req.end()
    }
    catch(err) {
      console.log(err)
    }
kind: ConfigMap
metadata:
  name: script-load-bq-connector
---
apiVersion: batch/v1
kind: Job
metadata:
  name: load-bq-connector
spec:
  backoffLimit: 2
  ttlSecondsAfterFinished: 720
  template:
    spec:
      containers:
        - command:
            - "node"
            - "/opt/script/load-bq.js"
          envFrom:
            - configMapRef:
                name: connect-properties
          image:  <CONTAINER_REGISTRY_PATH>/nodejs:utility
          imagePullPolicy: IfNotPresent
          name: load-bq-connector
          volumeMounts:
            - mountPath: /opt/script
              name: script-load-bq-connector
              readOnly: false
      restartPolicy: Never
      volumes:
        - configMap:
            name: script-load-bq-connector
          name: script-load-bq-connector
